; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	D:\강석민\주말ADVCPP\1일차\6_함수객체4.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG5563	DB	0b0H, 0e1H, 0b0H, 0faH, ' : %d', 0aH, 00H
	ORG $+1
$SG5566	DB	0b0H, 0e1H, 0b0H, 0faH, ' : %d', 0aH, 00H
	ORG $+1
$SG5569	DB	0b0H, 0e1H, 0b0H, 0faH, ' : %d', 0aH, 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	?cmp1@@YA_NHH@Z					; cmp1
PUBLIC	?cmp2@@YA_NHH@Z					; cmp2
PUBLIC	_main
PUBLIC	??$foo@P6A_NHH@Z@@YAXP6A_NHH@Z@Z		; foo<bool (__cdecl*)(int,int)>
PUBLIC	??$foo@ULess@@@@YAXULess@@@Z			; foo<Less>
PUBLIC	??$foo@UGreater@@@@YAXUGreater@@@Z		; foo<Greater>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp
; File d:\강석민\주말advcpp\1일차\6_함수객체4.cpp
;	COMDAT ??$foo@UGreater@@@@YAXUGreater@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_b$ = -1						; size = 1
_f$ = 8							; size = 1
??$foo@UGreater@@@@YAXUGreater@@@Z PROC			; foo<Greater>, COMDAT

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 18   : 	bool b = f(1, 2);

	mov	eax, 1
	cmp	eax, 2
	jle	SHORT $LN5@foo
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN3@foo
$LN5@foo:
	mov	DWORD PTR tv72[ebp], 0
$LN3@foo:
	mov	cl, BYTE PTR tv72[ebp]
	mov	BYTE PTR _b$[ebp], cl

; 19   : 	printf("결과 : %d\n", b);

	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	push	OFFSET $SG5569
	call	_printf
	add	esp, 8

; 20   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$foo@UGreater@@@@YAXUGreater@@@Z ENDP			; foo<Greater>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\강석민\주말advcpp\1일차\6_함수객체4.cpp
;	COMDAT ??$foo@ULess@@@@YAXULess@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_b$ = -1						; size = 1
_f$ = 8							; size = 1
??$foo@ULess@@@@YAXULess@@@Z PROC			; foo<Less>, COMDAT

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 18   : 	bool b = f(1, 2);

	mov	eax, 1
	cmp	eax, 2
	jge	SHORT $LN5@foo
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN3@foo
$LN5@foo:
	mov	DWORD PTR tv72[ebp], 0
$LN3@foo:
	mov	cl, BYTE PTR tv72[ebp]
	mov	BYTE PTR _b$[ebp], cl

; 19   : 	printf("결과 : %d\n", b);

	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	push	OFFSET $SG5566
	call	_printf
	add	esp, 8

; 20   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$foo@ULess@@@@YAXULess@@@Z ENDP			; foo<Less>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\강석민\주말advcpp\1일차\6_함수객체4.cpp
;	COMDAT ??$foo@P6A_NHH@Z@@YAXP6A_NHH@Z@Z
_TEXT	SEGMENT
_b$ = -1						; size = 1
_f$ = 8							; size = 4
??$foo@P6A_NHH@Z@@YAXP6A_NHH@Z@Z PROC			; foo<bool (__cdecl*)(int,int)>, COMDAT

; 17   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 18   : 	bool b = f(1, 2);

	push	2
	push	1
	call	DWORD PTR _f$[ebp]
	add	esp, 8
	mov	BYTE PTR _b$[ebp], al

; 19   : 	printf("결과 : %d\n", b);

	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	push	OFFSET $SG5563
	call	_printf
	add	esp, 8

; 20   : }

	mov	esp, ebp
	pop	ebp
	ret	0
??$foo@P6A_NHH@Z@@YAXP6A_NHH@Z@Z ENDP			; foo<bool (__cdecl*)(int,int)>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\강석민\주말advcpp\1일차\6_함수객체4.cpp
_TEXT	SEGMENT
_f2$ = -2						; size = 1
_f1$ = -1						; size = 1
_main	PROC

; 22   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 23   : 	Less    f1;
; 24   : 	Greater f2;
; 25   : 
; 26   : 	foo(cmp1);

	push	OFFSET ?cmp1@@YA_NHH@Z			; cmp1
	call	??$foo@P6A_NHH@Z@@YAXP6A_NHH@Z@Z	; foo<bool (__cdecl*)(int,int)>
	add	esp, 4

; 27   : 	foo(cmp2); // foo(함수포인터) => 치환 안됨

	push	OFFSET ?cmp2@@YA_NHH@Z			; cmp2
	call	??$foo@P6A_NHH@Z@@YAXP6A_NHH@Z@Z	; foo<bool (__cdecl*)(int,int)>
	add	esp, 4

; 28   : 	foo(f1);   // foo(Less)	   => 치환됨

	movzx	eax, BYTE PTR _f1$[ebp]
	push	eax
	call	??$foo@ULess@@@@YAXULess@@@Z		; foo<Less>
	add	esp, 4

; 29   : 	foo(f2);   // foo(Greater) => 치환됨

	movzx	ecx, BYTE PTR _f2$[ebp]
	push	ecx
	call	??$foo@UGreater@@@@YAXUGreater@@@Z	; foo<Greater>
	add	esp, 4

; 30   : }

	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\강석민\주말advcpp\1일차\6_함수객체4.cpp
;	COMDAT ?cmp2@@YA_NHH@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?cmp2@@YA_NHH@Z PROC					; cmp2, COMDAT

; 14   : inline bool cmp2(int a, int b) { return a > b; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jle	SHORT $LN3@cmp2
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@cmp2
$LN3@cmp2:
	mov	DWORD PTR tv65[ebp], 0
$LN4@cmp2:
	mov	al, BYTE PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?cmp2@@YA_NHH@Z ENDP					; cmp2
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\강석민\주말advcpp\1일차\6_함수객체4.cpp
;	COMDAT ?cmp1@@YA_NHH@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?cmp1@@YA_NHH@Z PROC					; cmp1, COMDAT

; 13   : inline bool cmp1(int a, int b) { return a < b; }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jge	SHORT $LN3@cmp1
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@cmp1
$LN3@cmp1:
	mov	DWORD PTR tv65[ebp], 0
$LN4@cmp1:
	mov	al, BYTE PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?cmp1@@YA_NHH@Z ENDP					; cmp1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -16						; size = 4
__Stream$ = -12						; size = 4
__Format$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

	call	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __Format$[ebp]
	mov	DWORD PTR __Format$[ebp], ecx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	mov	DWORD PTR __Stream$[ebp], eax
	mov	edx, DWORD PTR __ArgList$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR __Format$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Stream$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
	mov	DWORD PTR __Result$[ebp], eax

; 955  :     __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 956  :     return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 957  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

	push	ebp
	mov	ebp, esp

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

	pop	ebp
	ret	0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
