library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
play()
path2csv
nxt()
ls()
dic(mydf)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(1:10))
select(cran, -(X:size))
play()
X
size
(X:size)
cran
nxt()
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, country=="IN", r_version<="3.0.2")
filter(cran, country == "US" | country == "IN" )
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
argument
args
args(tbl_df)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
?summarize1
tbl
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count<679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(pack_sum, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
play()
pack_sum
nxt()
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
play()
nxt()
submit()
submit()
submit()
View(result3)
select(cran)
cran %>% select() %>% print
play()
nxt()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
?gather
gather(students, sex, count, -grade)
students2
?gather
gather(students2, key=male, value = male_1, male_2, key=female, value = female_1, female_2)
gather(students2, key=male, value = male_1, male_2, key=female, value = female_1, female_2)
gather(student2, sex, count)
gather(students2, sex, count)
gather(students2, sex_class, count, -grade)
info()
?grade
?gather
gather(students2, sex_class, count, -grade)
gather(students2, key=sex, value=male_1, male_2, count, -grade)
gather(students2, key=sex, value=male_1, male_2, -grade)
gather(students2, key=sex, value=count, -grade)
gather(students2, key=sex_class, value=count, -grade)
sex_class
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
reset()
submit()
submit()
submit()
?spread
vi reset()
reset()
submit()
reset()
submit()
?spread()
reset()
submit()
submit()
reset()
submit()
reset()
submit()
reset()
submit()
extract_numeric("class5")
reset()
reset()
reset()
reset()
submit()
submit()
submit()
reset()
students3 %>%
  gather(class, grade, class1:class5, na.rm = TRUE) %>%
  spread(test, grade) 
students3 %>%
  gather(class, grade, class1:class5, na.rm = TRUE) %>%
  spread(test, grade) 
students3 %>%
  gather(class, grade, class1:class5, na.rm = TRUE) %>%
  spread(test, grade)  %>%
  mutate(nn = extract_numeric(class))
reset()
submit()
students4
submit()
reset()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
reset()
?separate()
submit()
submit()
?separate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
reset()
submit()
submit()
submit()
0
swirl()
swirl()
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
